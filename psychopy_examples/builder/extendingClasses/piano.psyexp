<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.2.10">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant':'', 'session':'001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="(1024, 768)" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="piano" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="from psychopy.visual.rect import Rect" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="import {Rect} from 'psychopy/visual/rect';&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="class PianoKey(Rect):&amp;#10;    &quot;&quot;&quot;A tall white Rect which plays a sound when pressed, like a piano key.&quot;&quot;&quot;&amp;#10;    def __init__(self, win, note=&quot;C&quot;, xPos=0):&amp;#10;        &quot;&quot;&quot;Function to create a Key object&quot;&quot;&quot;&amp;#10;        # Call __init__ function for parent class&amp;#10;        Rect.__init__(self, # First input should always be &quot;self&quot;, this means that the thing which is __init__ialised is this object&amp;#10;                      win=win, # Use window specified&amp;#10;                      pos=(xPos, 0.1), # This object is slightly above midpoint, at the x value specified&amp;#10;                      size=(0.09, 1), # This object is as tall as the screen and 9% as wide as the screen is tall&amp;#10;                      fillColor=&quot;white&quot;, # This object is white&amp;#10;                      autoDraw=True # This object should be drawn each frame&amp;#10;                      )&amp;#10;        # Store specified note as a parameter&amp;#10;        self.note = note&amp;#10;        # Create a Sound object with specified note with plenty of time to run on&amp;#10;        self.sound = sound.Sound(value=self.note, secs=100)&amp;#10;    &amp;#10;    def press(self, finger):&amp;#10;        &quot;&quot;&quot;Function which runs when Key is pressed&quot;&quot;&quot;&amp;#10;        # Play previously stored Sound object&amp;#10;        self.sound.play()&amp;#10;        # Wait until the finger (mouse) is no longer pressing this object&amp;#10;        while finger.isPressedIn(self):&amp;#10;            pass&amp;#10;        # When finger is released, stop playing sound and reset its time to 0&amp;#10;        self.sound.stop(reset=True)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="class PianoKey extends Rect {&amp;#10;    /* A tall white Rect which plays a sound when pressed, like a piano key. */&amp;#10;    constructor(win, note = &quot;C&quot;, xPos = 0) {&amp;#10;        /* Function to create a Key object */&amp;#10;        Rect.__init__(this, {&quot;win&quot;: win, &quot;pos&quot;: [xPos, 0.1], &quot;size&quot;: [0.09, 1], &quot;fillColor&quot;: &quot;white&quot;, &quot;autoDraw&quot;: true});&amp;#10;        this.note = note;&amp;#10;        this.sound = new sound.Sound({&quot;value&quot;: this.note, &quot;secs&quot;: 100});&amp;#10;    }&amp;#10;    press(finger) {&amp;#10;        /* Function which runs when Key is pressed */&amp;#10;        this.sound.play();&amp;#10;        while (finger.isPressedIn(this)) {&amp;#10;        }&amp;#10;        this.sound.stop({&quot;reset&quot;: true});&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="keys = {&quot;C&quot;: new PianoKey(win, {&quot;note&quot;: &quot;C&quot;, &quot;xPos&quot;: (- 0.3)}), &quot;D&quot;: new PianoKey(win, {&quot;note&quot;: &quot;D&quot;, &quot;xPos&quot;: (- 0.2)}), &quot;E&quot;: new PianoKey(win, {&quot;note&quot;: &quot;E&quot;, &quot;xPos&quot;: (- 0.1)}), &quot;F&quot;: new PianoKey(win, {&quot;note&quot;: &quot;F&quot;, &quot;xPos&quot;: 0.0}), &quot;G&quot;: new PianoKey(win, {&quot;note&quot;: &quot;G&quot;, &quot;xPos&quot;: 0.1}), &quot;A&quot;: new PianoKey(win, {&quot;note&quot;: &quot;A&quot;, &quot;xPos&quot;: 0.2}), &quot;B&quot;: new PianoKey(win, {&quot;note&quot;: &quot;B&quot;, &quot;xPos&quot;: 0.3})};&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# Create a PianoKey object for each note in an octave&amp;#10;keys = {&amp;#10;    'C': PianoKey(win, note=&quot;C&quot;, xPos=-0.3),&amp;#10;    'D': PianoKey(win, note=&quot;D&quot;, xPos=-0.2),&amp;#10;    'E': PianoKey(win, note=&quot;E&quot;, xPos=-0.1),&amp;#10;    'F': PianoKey(win, note=&quot;F&quot;, xPos= 0.0),&amp;#10;    'G': PianoKey(win, note=&quot;G&quot;, xPos= 0.1),&amp;#10;    'A': PianoKey(win, note=&quot;A&quot;, xPos= 0.2),&amp;#10;    'B': PianoKey(win, note=&quot;B&quot;, xPos= 0.3),&amp;#10;}" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# For each PianoKey object...&amp;#10;for i, key in keys.items():&amp;#10;    # Check whether the finger (mouse) is pressed on it&amp;#10;    if finger.isPressedIn(key):&amp;#10;        # If it is, then call the object's &quot;press&quot; method&amp;#10;        key.press(finger)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <MouseComponent name="finger">
        <Param name="clickable" updates="constant" val="" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="never" valType="str"/>
        <Param name="name" updates="None" val="finger" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="False" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="never" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="trial"/>
  </Flow>
</PsychoPy2experiment>
